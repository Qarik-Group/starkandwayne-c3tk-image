#!/usr/bin/env bash

exec &> >(tee -a /build.log)

installPath="/opt/bin"

mkdir -p "${installPath}"

chmod_ln() { 
  chmod 0766 "${installPath}/${cmd}"
  ln -s "${installPath}/${1}" "/usr/local/bin/${1}"
}

install_cmd() {
  cmd="$1" ; shift
  url="$2" ; shift
  echo "Installing \`${cmd}\`..."
  eval "$@"
  chmod_ln "${cmd}"
}

set -vx

# TODO: enable locking specific versions vs 'latest'
bosh_version="7.0.1"
boss_version="0.0.6"
cf7_version="latest" # TODO: cf7, cf8, cf -> cf7
credhub_version="2.9.3"
fly_version="7.8.0"
genesis_version="2.8.5"
go_version="1.18.3"
jq_version="latest"
k9s_version="latest"
kubectl_version="1.24.1"
safe_version="latest"
spruce_version="latest"
vault_version="1.10.3"
xq_version="latest"
yq_version="latest"

cmd=jq ; echo "Installing \`${cmd}\`..."
url="https://github.com/stedolan/jq/releases/latest/download/jq-linux64"
curl -sL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=yq ; echo "Installing \`${cmd}\`..."
url="https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
curl -sL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=xq ; echo "Installing \`${cmd}\`..."
pip3 install ${cmd} && mv /usr/local/bin/${cmd} "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=safe ; echo "Installing \`${cmd}\`..."
# v=${safe_version}
url="https://github.com/starkandwayne/safe/releases/latest/download/safe-linux-amd64"
curl -sL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=spruce ; echo "Installing \`${cmd}\`..."
url="https://github.com/geofffranks/spruce/releases/latest/download/spruce-linux-amd64"
curl -sL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=cf7 ; echo "Installing \`${cmd}\`..."
url="https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github"
curl -sL "${url}" | tar -zx 
mv "${cmd}" "${installPath}/${cmd}" && chmod_ln "${cmd}"
cmd=cf ; echo "Installing \`${cmd}\`..."
mv "${cmd}" "${installPath}/${cmd}"

cmd=bosh ; echo "Installing \`${cmd}\`..."
v="${bosh_version}" # $(curl -s https://github.com/cloudfoundry/bosh-cli/releases/latest | awk -F\" '{print $2}' | awk -F/ '{print $NF}')
url="https://github.com/cloudfoundry/bosh-cli/releases/download/v${v}/bosh-cli-${v}-linux-amd64"
curl -sL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=boss ; echo "Installing \`${cmd}\`..."
https://github.com/releases/latest
v="${boss_version}" # $(curl -s https://github.com/blacksmith-community/boss/releases/latest | awk -F\" '{print $2}' | awk -F/ '{print $NF}')
url="https://github.com/blacksmith-community/boss/releases/download/v${v}/boss-linux-amd64"
curl -sL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=cc-me ; echo "Installing \`${cmd}\`..."
url="https://raw.githubusercontent.com/jhunt/cc-me/master/cc-me"
 curl -sL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=credhub ; echo "Installing \`${cmd}\`..."
v="${credhub_version}" #$(curl -s https://github.com/cloudfoundry/credhub-cli/releases/latest | awk -F\" '{print $2}' | awk -F/ '{print $NF}')
url="https://github.com/cloudfoundry/credhub-cli/releases/download/${v}/credhub-linux-${v}.tgz"
curl -sL "${url}" | tar -zx && mv "${cmd}" "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=vault; echo "Installing \`${cmd}\`..."
v="${vault_version}" # $(curl -s https://github.com/hashicorp/vault/releases/latest | awk -F\" '{print $2}' | awk -F/ '{print $NF}' | tr -d 'v')
file="vault_${v}_linux_amd64.zip"
url="https://releases.hashicorp.com/vault/${v}/${file}"
curl -sLO "${url}" && unzip "${file}" && mv "${cmd}" "${installPath}/${cmd}" &&
  chmod_ln "${cmd}"
rm -f "${file}"

cmd=fly ; echo "Installing \`${cmd}\`..."
#v=$(curl -s https://github.com/concourse/concourse/releases/latest | awk -F\" '{print $2}' | awk -F/ '{print $NF}')
#url="https://github.com/concourse/concourse/releases/download/${v}/fly-${v/v/}-linux-amd64.tgz"
v="${fly_version}"
url=https://github.com/concourse/concourse/releases/download/v${v}/fly-${v}-linux-amd64.tgz
curl -sL "${url}" | tar -zx && mv "${cmd}" "${installPath}/${cmd}" && chmod_ln "${cmd}"
# NOTE: for `fly` we use a wrapper script in /usr/local/bin/

cmd=genesis ; echo "Installing \`${cmd}\`..."
v="${genesis_version}" #$(curl -s https://github.com/genesis-community/genesis/releases/latest | awk -F\" '{print $2}' | awk -F/ '{print $NF}')
url="https://github.com/genesis-community/genesis/releases/download/v${v}/genesis"
curl -sL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"
#git clone https://github.com/genesis-community/genesis.git && cd genesis
#_rev=$(git rev-parse --short=10 HEAD)
#make dev-release
#mv ./genesis-dev-${_rev} ${installPath}/${cmd} && chmod_ln ${cmd}
#cd ../ && rm -rf ./genesis/

cmd=kubectl ; echo "Installing \`${cmd}\`..."
v="${kubectl_version}" # $(curl -s https://github.com/kubernetes/kubernetes/releases/latest | awk -F\" '{print $2}' | awk -F/ '{print $NF}')
url="https://storage.googleapis.com/kubernetes-release/release/v${v}/bin/linux/amd64/kubectl"
curl -fsSL "${url}" -o "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=k9s ; echo "Installing \`${cmd}\`..."
# v="${k9s_version}"
url="https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_x86_64.tar.gz"
curl -sL "${url}" | tar -zx && mv "${cmd}" "${installPath}/${cmd}" && chmod_ln "${cmd}"

cmd=go ; echo "Installing \`${cmd}\`..."
v="${go_version}"
url="https://go.dev/dl/go${v}.linux-amd64.tar.gz"

curl -sLO "${url}" && 
  tar -C /usr/local -xzf go${v}.linux-amd64.tar.gz && 
  ln -s /usr/local/go/bin/go /usr/local/bin/go &&
  ln -s /usr/local/go/bin/gofmt /usr/local/bin/gofmt

rm -f $(basename $url)

exit 0
